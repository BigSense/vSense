# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

require './vagrantenv'
vars = VagrantEnv.new

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.box = vars.vbox_image('ubuntu')

  if vars.ssh_security_enabled?
    #TODO: have security role update environemnt.yml and check that instead
    config.ssh.private_key_path = [ File.join(ENV['HOME'], '.vagrant.d', 'insecure_private_key') , vars.ssh_identity_key_file()]
  end

  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.ignore_private_ip = false
  config.hostmanager.include_offline = true


  config.vm.define "haproxy" do |haproxy|
    haproxy.vm.network :private_network, ip: vars.ip('haproxy')
    haproxy.vm.provider "virtualbox" do |vb, vb_override|
      vb_override.vm.network :public_network, ip: vars.ext_ip('haproxy')
    end
    haproxy.vm.provider "libvirt" do |virt, virt_override|
      virt_override.vm.network :public_network, :dev => vars.ext_iface('haproxy'), :mode=>'bridge', :ip => vars.ext_ip('haproxy')
      virt_override.vm.provision :shell, :inline => "echo -e \"#!/bin/sh -e\n#vsense dirty default route hack\nip route del 0/0;sudo route add default gw #{vars.ext_gw};exit 0\" > /etc/rc.local; chmod 755 /etc/rc.local; /etc/rc.local"
    end
    haproxy.vm.hostname = vars.hostname('haproxy')
    haproxy.hostmanager.aliases = vars.aliases('haproxy')
    haproxy.vm.provision "ansible" do |ansible|
      ansible.playbook = "ansible/haproxy.yml"
    end
  end

  config.vm.define "wiki" do |wiki|
    wiki.vm.network :private_network, ip: vars.ip('wiki')
    wiki.vm.hostname = vars.hostname('wiki')
    wiki.hostmanager.aliases = vars.aliases('wiki')
    wiki.vm.provider "virtualbox" do |vb|
      vb.customize ["modifyvm", :id, "--memory", "2048"]
    end
    wiki.vm.provider "libvirt" do |virt|
      virt.memory = 4096
      virt.cpus = 2
    end
    wiki.vm.provision "ansible" do |ansible|
      ansible.playbook = "ansible/wiki.yml"
    end
  end

end
